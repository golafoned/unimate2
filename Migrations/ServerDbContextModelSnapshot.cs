// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UniMate2.Data;

#nullable disable

namespace UniMate2.Migrations
{
    [DbContext(typeof(ServerDbContext))]
    partial class ServerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UniMate2.Models.Domain.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1c659281-80a5-4790-b898-a5a0f16c79e9"),
                            Description = "A meetup for community members.",
                            EndDate = new DateTime(2023, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "City Park",
                            StartDate = new DateTime(2023, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Community Meetup"
                        },
                        new
                        {
                            Id = new Guid("d75f24f3-3eef-43bf-bb9f-f3b1adfac114"),
                            Description = "Annual technology conference.",
                            EndDate = new DateTime(2023, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Convention Center",
                            StartDate = new DateTime(2023, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Tech Conference"
                        },
                        new
                        {
                            Id = new Guid("bf74ba1f-d5cf-44e3-9e72-d3ac718a41cc"),
                            Description = "Workshop on emerging technologies.",
                            EndDate = new DateTime(2023, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Tech Institute",
                            StartDate = new DateTime(2023, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Workshop"
                        });
                });

            modelBuilder.Entity("UniMate2.Models.Domain.FriendRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("text");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SenderId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("FriendRequests");
                });

            modelBuilder.Entity("UniMate2.Models.Domain.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LikedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LikedId")
                        .HasColumnType("text");

                    b.Property<string>("LikerId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LikedId");

                    b.HasIndex("LikerId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("UniMate2.Models.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Faculty")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<int?>("IsDrinking")
                        .HasColumnType("integer");

                    b.Property<int?>("IsSmoking")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LookingFor")
                        .HasColumnType("integer");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int?>("Orientation")
                        .HasColumnType("integer");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<int?>("PersonalityType")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("University")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int?>("ZodiakSign")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f55d784b-a001-4d6b-9691-6869f3a484b1",
                            AccessFailedCount = 0,
                            Bio = "",
                            BirthDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "0f1f51ee-de07-47bb-ab7d-ae6446d5a7bc",
                            EmailConfirmed = false,
                            Faculty = "Faculty2",
                            FirstName = "FirstName2",
                            Gender = 2,
                            IsDrinking = 0,
                            IsSmoking = 1,
                            LastName = "LastName2",
                            LockoutEnabled = false,
                            LookingFor = 0,
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1@EXAMPLE.COM",
                            Orientation = 0,
                            PasswordHash = "AQAAAAIAAYagAAAAEMQH2+1EKMaU/C+DZa6gH69NdjGizJ+eoBOPjOz2dZqzlOuqL16rjbxlE6P6InXQzQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4a16ad80-148d-49fa-8a94-9cdd5f7562da",
                            TwoFactorEnabled = false,
                            University = "University1"
                        },
                        new
                        {
                            Id = "b82260db-dcd3-4805-a099-3ce685920dc3",
                            AccessFailedCount = 0,
                            Bio = "Bio2",
                            BirthDate = new DateTime(2002, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "7c567244-5cdb-4fa6-bdcd-d02ff4c8ad48",
                            Email = "user2@example.com",
                            EmailConfirmed = false,
                            Faculty = "Faculty2",
                            FirstName = "FirstName2",
                            Gender = 0,
                            IsDrinking = 0,
                            IsSmoking = 1,
                            LastName = "LastName2",
                            LockoutEnabled = false,
                            LookingFor = 0,
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2@EXAMPLE.COM",
                            Orientation = 0,
                            PasswordHash = "AQAAAAIAAYagAAAAEF1bfVrdoNfqX7Upm5PWkRN11/kJg03S+bBHPQewWpTFtgTWf20teKFSENSppjbNlQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "878e0ded-e505-44c5-8574-a0677b866dd2",
                            TwoFactorEnabled = false,
                            University = "University2",
                            UserName = "user2@example.com"
                        },
                        new
                        {
                            Id = "126b2f83-82af-4a08-bd15-8d0e9551000d",
                            AccessFailedCount = 0,
                            Bio = "Loves hiking and outdoor adventures.",
                            BirthDate = new DateTime(1995, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "d9163b4d-749b-4840-86de-6bba77133cf2",
                            Email = "alice.johnson@example.com",
                            EmailConfirmed = false,
                            Faculty = "Engineering",
                            FirstName = "Alice",
                            Gender = 1,
                            IsDrinking = 2,
                            IsSmoking = 1,
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            LookingFor = 1,
                            NormalizedEmail = "ALICE.JOHNSON@EXAMPLE.COM",
                            NormalizedUserName = "ALICE.JOHNSON@EXAMPLE.COM",
                            Orientation = 2,
                            PasswordHash = "AQAAAAIAAYagAAAAEH4lvSo99OOEPsK2ez5Xaospl866mgIg7zQD6TuxBYobCvtlC4czCWmSAxRpIjo+AQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0b91ddb6-827d-4953-85c1-3baa481a85cf",
                            TwoFactorEnabled = false,
                            University = "Tech University",
                            UserName = "alice.johnson@example.com"
                        },
                        new
                        {
                            Id = "68a477ff-4c53-4de1-acb4-803951c0e14d",
                            AccessFailedCount = 0,
                            Bio = "Enjoys cooking and traveling.",
                            BirthDate = new DateTime(1988, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "1d22c4eb-3d35-44da-bd95-92a226b83109",
                            Email = "bob.smith@example.com",
                            EmailConfirmed = false,
                            Faculty = "Business",
                            FirstName = "Bob",
                            Gender = 0,
                            IsDrinking = 0,
                            IsSmoking = 0,
                            LastName = "Smith",
                            LockoutEnabled = false,
                            LookingFor = 0,
                            NormalizedEmail = "BOB.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "BOB.SMITH@EXAMPLE.COM",
                            Orientation = 0,
                            PasswordHash = "AQAAAAIAAYagAAAAELhJBAQMa2jGjPpubC0pKYLDskG8CKRsoAMUltjmk0NpBg9EzmZDYZWeyxIzAZ2FLQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d568cdbb-4808-4db4-aa50-ece6cb57a495",
                            TwoFactorEnabled = false,
                            University = "State University",
                            UserName = "bob.smith@example.com"
                        },
                        new
                        {
                            Id = "e266d85e-8640-45e3-960f-b2682250d3df",
                            AccessFailedCount = 0,
                            Bio = "Passionate about graphic design and photography.",
                            BirthDate = new DateTime(1992, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "4b4db4bf-94b4-45ac-965f-eb914f0644a9",
                            Email = "carol.davis@example.com",
                            EmailConfirmed = false,
                            Faculty = "Design",
                            FirstName = "Carol",
                            Gender = 0,
                            IsDrinking = 1,
                            IsSmoking = 2,
                            LastName = "Davis",
                            LockoutEnabled = false,
                            LookingFor = 3,
                            NormalizedEmail = "CAROL.DAVIS@EXAMPLE.COM",
                            NormalizedUserName = "CAROL.DAVIS@EXAMPLE.COM",
                            Orientation = 3,
                            PasswordHash = "AQAAAAIAAYagAAAAEK2audBko0/FFvdvF+R7n10jkVpwDEYh7L2Q83BgEdtoqfzjmegudK7h+JOOZsYntA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fe89c641-ce89-4c5a-a3b9-ff10ea4ec9ed",
                            TwoFactorEnabled = false,
                            University = "Arts College",
                            UserName = "carol.davis@example.com"
                        },
                        new
                        {
                            Id = "d598f1c3-e051-46dd-8443-bc8b34699907",
                            AccessFailedCount = 0,
                            Bio = "Avid cyclist and technology enthusiast.",
                            BirthDate = new DateTime(1990, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "b2ef04b0-24e0-4512-9343-bf0d7b581a63",
                            Email = "david.miller@example.com",
                            EmailConfirmed = false,
                            Faculty = "Mechanical",
                            FirstName = "David",
                            Gender = 0,
                            IsDrinking = 0,
                            IsSmoking = 1,
                            LastName = "Miller",
                            LockoutEnabled = false,
                            LookingFor = 2,
                            NormalizedEmail = "DAVID.MILLER@EXAMPLE.COM",
                            NormalizedUserName = "DAVID.MILLER@EXAMPLE.COM",
                            Orientation = 1,
                            PasswordHash = "AQAAAAIAAYagAAAAEM63abZj6l+4+uuNMRcE7zahB3GvYZBvqPeRLTSis10ezWhZFJDBbNJzP6hEU2C9TA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a1f90b9a-0e1b-4500-b921-0917c021df6e",
                            TwoFactorEnabled = false,
                            University = "Engineering Institute",
                            UserName = "david.miller@example.com"
                        });
                });

            modelBuilder.Entity("UserImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserImages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("UniMate2.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("UniMate2.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniMate2.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("UniMate2.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UniMate2.Models.Domain.FriendRequest", b =>
                {
                    b.HasOne("UniMate2.Models.Domain.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId");

                    b.HasOne("UniMate2.Models.Domain.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("UniMate2.Models.Domain.Like", b =>
                {
                    b.HasOne("UniMate2.Models.Domain.User", "Liked")
                        .WithMany()
                        .HasForeignKey("LikedId");

                    b.HasOne("UniMate2.Models.Domain.User", "Liker")
                        .WithMany()
                        .HasForeignKey("LikerId");

                    b.Navigation("Liked");

                    b.Navigation("Liker");
                });

            modelBuilder.Entity("UniMate2.Models.Domain.User", b =>
                {
                    b.HasOne("UniMate2.Models.Domain.User", null)
                        .WithMany("Friends")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("UserImage", b =>
                {
                    b.HasOne("UniMate2.Models.Domain.User", "User")
                        .WithMany("Images")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UniMate2.Models.Domain.User", b =>
                {
                    b.Navigation("Friends");

                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}

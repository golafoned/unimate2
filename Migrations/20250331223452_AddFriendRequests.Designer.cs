// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UniMate2.Data;

#nullable disable

namespace UniMate2.Migrations
{
    [DbContext(typeof(ServerDbContext))]
    [Migration("20250331223452_AddFriendRequests")]
    partial class AddFriendRequests
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UniMate2.Models.Domain.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5af2f0e8-35fe-4392-b2e9-de5d821640fd"),
                            Description = "A meetup for community members.",
                            EndDate = new DateTime(2023, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "City Park",
                            StartDate = new DateTime(2023, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Community Meetup"
                        },
                        new
                        {
                            Id = new Guid("c89e0bca-363c-4161-83da-3fd2967ce7a6"),
                            Description = "Annual technology conference.",
                            EndDate = new DateTime(2023, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Convention Center",
                            StartDate = new DateTime(2023, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Tech Conference"
                        },
                        new
                        {
                            Id = new Guid("6bae456c-8219-4fbf-b795-a4d27a13999b"),
                            Description = "Workshop on emerging technologies.",
                            EndDate = new DateTime(2023, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Tech Institute",
                            StartDate = new DateTime(2023, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Workshop"
                        });
                });

            modelBuilder.Entity("UniMate2.Models.Domain.FriendRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RequesterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("RequesterId");

                    b.ToTable("FriendRequests");
                });

            modelBuilder.Entity("UniMate2.Models.Domain.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LikedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LikedId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LikerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LikedId");

                    b.HasIndex("LikerId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("UniMate2.Models.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Faculty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<int?>("IsDrinking")
                        .HasColumnType("int");

                    b.Property<int?>("IsSmoking")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("LookingFor")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("Orientation")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonalityType")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("University")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("ZodiakSign")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "249792f9-b392-4e93-a121-d386631b3bdb",
                            AccessFailedCount = 0,
                            Bio = "",
                            BirthDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "8a15657f-021d-4751-8f03-7c4951cd9c70",
                            EmailConfirmed = false,
                            Faculty = "Faculty2",
                            FirstName = "FirstName2",
                            Gender = 2,
                            IsDrinking = 0,
                            IsSmoking = 1,
                            LastName = "LastName2",
                            LockoutEnabled = false,
                            LookingFor = 0,
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1@EXAMPLE.COM",
                            Orientation = 0,
                            PasswordHash = "AQAAAAIAAYagAAAAEEqEfoCY2QBqMTIzZtUtNTIUtPBkyLRBffmRLUQCr64yb7A9T1VVoB+534mFrsQvCw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8595bad7-5bcb-4599-a542-be74ec164869",
                            TwoFactorEnabled = false,
                            University = "University1"
                        },
                        new
                        {
                            Id = "046f2f26-8971-43f6-8e29-46f27f279d9d",
                            AccessFailedCount = 0,
                            Bio = "Bio2",
                            BirthDate = new DateTime(2002, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "2e50604e-3a1f-44a3-a5f3-eaac788f0a30",
                            Email = "user2@example.com",
                            EmailConfirmed = false,
                            Faculty = "Faculty2",
                            FirstName = "FirstName2",
                            Gender = 0,
                            IsDrinking = 0,
                            IsSmoking = 1,
                            LastName = "LastName2",
                            LockoutEnabled = false,
                            LookingFor = 0,
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2@EXAMPLE.COM",
                            Orientation = 0,
                            PasswordHash = "AQAAAAIAAYagAAAAEIhuSJVCAfiqyEVaUP+oUD1IiVrsZ/bvgXtxodMwp0wSzTXYtAWrkqgEv2twCZwrvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "17952ee0-d3f4-41e4-b3a3-efacdf3b594f",
                            TwoFactorEnabled = false,
                            University = "University2",
                            UserName = "user2@example.com"
                        },
                        new
                        {
                            Id = "2bb5cfdf-a81c-4326-bcc4-63812b20241a",
                            AccessFailedCount = 0,
                            Bio = "Loves hiking and outdoor adventures.",
                            BirthDate = new DateTime(1995, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "ee4a1459-df88-4be6-8504-7bc3918c7324",
                            Email = "alice.johnson@example.com",
                            EmailConfirmed = false,
                            Faculty = "Engineering",
                            FirstName = "Alice",
                            Gender = 1,
                            IsDrinking = 2,
                            IsSmoking = 1,
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            LookingFor = 1,
                            NormalizedEmail = "ALICE.JOHNSON@EXAMPLE.COM",
                            NormalizedUserName = "ALICE.JOHNSON@EXAMPLE.COM",
                            Orientation = 2,
                            PasswordHash = "AQAAAAIAAYagAAAAEN0oPLfwsGp26LHFMkKgvfrfCF8MWhaBMGoPW7xuTNkRWiIyZ6H2CGImlb/4kSYL7A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bba5229a-581a-45c5-afc5-9b1d67c8b3fc",
                            TwoFactorEnabled = false,
                            University = "Tech University",
                            UserName = "alice.johnson@example.com"
                        },
                        new
                        {
                            Id = "11d4feae-223f-47be-b2fe-2595798bc6cb",
                            AccessFailedCount = 0,
                            Bio = "Enjoys cooking and traveling.",
                            BirthDate = new DateTime(1988, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "3d69a508-5c1c-4fea-8ad7-a16fb6718b47",
                            Email = "bob.smith@example.com",
                            EmailConfirmed = false,
                            Faculty = "Business",
                            FirstName = "Bob",
                            Gender = 0,
                            IsDrinking = 0,
                            IsSmoking = 0,
                            LastName = "Smith",
                            LockoutEnabled = false,
                            LookingFor = 0,
                            NormalizedEmail = "BOB.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "BOB.SMITH@EXAMPLE.COM",
                            Orientation = 0,
                            PasswordHash = "AQAAAAIAAYagAAAAEPk6O1+T0yt1OPJRP0gngr24szmRJ4rZQ3dde9WreYjHhytPxiJO9J0uRx5n+xO91A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8f86e93e-cb91-4b1e-aa5e-8748a3d32d18",
                            TwoFactorEnabled = false,
                            University = "State University",
                            UserName = "bob.smith@example.com"
                        },
                        new
                        {
                            Id = "51b3c444-aa72-4356-9b08-c500ad16b165",
                            AccessFailedCount = 0,
                            Bio = "Passionate about graphic design and photography.",
                            BirthDate = new DateTime(1992, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "7f54cc5c-47d0-48a0-b4fb-5da009ac6483",
                            Email = "carol.davis@example.com",
                            EmailConfirmed = false,
                            Faculty = "Design",
                            FirstName = "Carol",
                            Gender = 0,
                            IsDrinking = 1,
                            IsSmoking = 2,
                            LastName = "Davis",
                            LockoutEnabled = false,
                            LookingFor = 3,
                            NormalizedEmail = "CAROL.DAVIS@EXAMPLE.COM",
                            NormalizedUserName = "CAROL.DAVIS@EXAMPLE.COM",
                            Orientation = 3,
                            PasswordHash = "AQAAAAIAAYagAAAAEBil/lMCxwC7XiDuDtn5yUEx2SfxXvMbN8wlRVem3ab2yjnl9qWXQEfVz16eXKImKQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "51460f29-86f6-466e-852b-ae92f5c6f0f3",
                            TwoFactorEnabled = false,
                            University = "Arts College",
                            UserName = "carol.davis@example.com"
                        },
                        new
                        {
                            Id = "ca667905-520a-4cbd-b94a-527b1ca668a9",
                            AccessFailedCount = 0,
                            Bio = "Avid cyclist and technology enthusiast.",
                            BirthDate = new DateTime(1990, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c467c49b-3e43-497f-9b15-858d1802af2f",
                            Email = "david.miller@example.com",
                            EmailConfirmed = false,
                            Faculty = "Mechanical",
                            FirstName = "David",
                            Gender = 0,
                            IsDrinking = 0,
                            IsSmoking = 1,
                            LastName = "Miller",
                            LockoutEnabled = false,
                            LookingFor = 2,
                            NormalizedEmail = "DAVID.MILLER@EXAMPLE.COM",
                            NormalizedUserName = "DAVID.MILLER@EXAMPLE.COM",
                            Orientation = 1,
                            PasswordHash = "AQAAAAIAAYagAAAAEIoggzUNzGMpzpk9pp2m9E8dKWyiNh30RcOYvZwPsmSruS5DjRz0fMj5tcDnaiD2BA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "565e6dfc-e520-47ec-b33f-bc765e9f8523",
                            TwoFactorEnabled = false,
                            University = "Engineering Institute",
                            UserName = "david.miller@example.com"
                        });
                });

            modelBuilder.Entity("UserImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserImages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("UniMate2.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("UniMate2.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniMate2.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("UniMate2.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UniMate2.Models.Domain.FriendRequest", b =>
                {
                    b.HasOne("UniMate2.Models.Domain.User", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UniMate2.Models.Domain.User", "Requester")
                        .WithMany()
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("UniMate2.Models.Domain.Like", b =>
                {
                    b.HasOne("UniMate2.Models.Domain.User", "Liked")
                        .WithMany()
                        .HasForeignKey("LikedId");

                    b.HasOne("UniMate2.Models.Domain.User", "Liker")
                        .WithMany()
                        .HasForeignKey("LikerId");

                    b.Navigation("Liked");

                    b.Navigation("Liker");
                });

            modelBuilder.Entity("UniMate2.Models.Domain.User", b =>
                {
                    b.HasOne("UniMate2.Models.Domain.User", null)
                        .WithMany("Friends")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("UserImage", b =>
                {
                    b.HasOne("UniMate2.Models.Domain.User", "User")
                        .WithMany("Images")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UniMate2.Models.Domain.User", b =>
                {
                    b.Navigation("Friends");

                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}

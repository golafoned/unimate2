// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UniMate2.Data;

#nullable disable

namespace UniMate2.Migrations
{
    [DbContext(typeof(ServerDbContext))]
    [Migration("20250317162925_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UniMate2.Models.Domain.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("37dc6fd4-2691-4dd1-af98-267cdb5ab8c2"),
                            Description = "A meetup for community members.",
                            EndDate = new DateTime(2023, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "City Park",
                            StartDate = new DateTime(2023, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Community Meetup"
                        },
                        new
                        {
                            Id = new Guid("fa2c2e66-199e-4054-a472-3c84d27a22e4"),
                            Description = "Annual technology conference.",
                            EndDate = new DateTime(2023, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Convention Center",
                            StartDate = new DateTime(2023, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Tech Conference"
                        },
                        new
                        {
                            Id = new Guid("b0e47d00-5bc2-46ef-82d4-a183489bd76f"),
                            Description = "Workshop on emerging technologies.",
                            EndDate = new DateTime(2023, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Tech Institute",
                            StartDate = new DateTime(2023, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Workshop"
                        });
                });

            modelBuilder.Entity("UniMate2.Models.Domain.FriendRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("FriendRequests");
                });

            modelBuilder.Entity("UniMate2.Models.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Faculty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<int?>("IsDrinking")
                        .HasColumnType("int");

                    b.Property<int?>("IsSmoking")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("LookingFor")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("Orientation")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonalityType")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("University")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("ZodiakSign")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "369b2388-e3ef-4015-abd2-b8e5cf8726b0",
                            AccessFailedCount = 0,
                            Bio = "",
                            BirthDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "0f7d04ae-6d54-4960-bc42-b99cca258328",
                            EmailConfirmed = false,
                            Faculty = "Faculty2",
                            FirstName = "FirstName2",
                            Gender = 2,
                            IsDrinking = 0,
                            IsSmoking = 1,
                            LastName = "LastName2",
                            LockoutEnabled = false,
                            LookingFor = 0,
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1@EXAMPLE.COM",
                            Orientation = 0,
                            PasswordHash = "AQAAAAIAAYagAAAAEJ1Eg4Jvt2I2Y8CpTyQQ0YLiAjpnaIezahdRxMjspD60AnNI8YOJ8Gw9PDYkYBQb4w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bdc4c895-fc5b-4a39-b05d-b574c49b38f1",
                            TwoFactorEnabled = false,
                            University = "University1"
                        },
                        new
                        {
                            Id = "a665e196-0050-48d1-8b6d-97af5679d69b",
                            AccessFailedCount = 0,
                            Bio = "Bio2",
                            BirthDate = new DateTime(2002, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "871b7620-f7cf-47e8-9611-6dc3632ff319",
                            Email = "user2@example.com",
                            EmailConfirmed = false,
                            Faculty = "Faculty2",
                            FirstName = "FirstName2",
                            Gender = 0,
                            IsDrinking = 0,
                            IsSmoking = 1,
                            LastName = "LastName2",
                            LockoutEnabled = false,
                            LookingFor = 0,
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2@EXAMPLE.COM",
                            Orientation = 0,
                            PasswordHash = "AQAAAAIAAYagAAAAEPmW7LdNUfCe8Rgay6jrxATjNqkbW3sJP062n6YMMl8vgyAtsNBu6oS779mfRix00A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e0d857b8-1581-4ca3-bb15-6c24b9a6a212",
                            TwoFactorEnabled = false,
                            University = "University2",
                            UserName = "user2@example.com"
                        },
                        new
                        {
                            Id = "0ea31df6-8460-43fa-b8fe-62a6b3c20063",
                            AccessFailedCount = 0,
                            Bio = "Loves hiking and outdoor adventures.",
                            BirthDate = new DateTime(1995, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "876164e0-c75c-463c-a38f-cdf1ce069d85",
                            Email = "alice.johnson@example.com",
                            EmailConfirmed = false,
                            Faculty = "Engineering",
                            FirstName = "Alice",
                            Gender = 1,
                            IsDrinking = 2,
                            IsSmoking = 1,
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            LookingFor = 1,
                            NormalizedEmail = "ALICE.JOHNSON@EXAMPLE.COM",
                            NormalizedUserName = "ALICE.JOHNSON@EXAMPLE.COM",
                            Orientation = 2,
                            PasswordHash = "AQAAAAIAAYagAAAAEFMFAwbJ93XEh+u7Cd6rpMetxh/7SwTMZGMZrmdGCMkFXr6t0GwKBnYgdG6mF4TZxg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "122ad0a7-3ade-415f-a30a-229853daa14d",
                            TwoFactorEnabled = false,
                            University = "Tech University",
                            UserName = "alice.johnson@example.com"
                        },
                        new
                        {
                            Id = "4a9736d4-19d2-47db-8d6f-dcd08e9c6671",
                            AccessFailedCount = 0,
                            Bio = "Enjoys cooking and traveling.",
                            BirthDate = new DateTime(1988, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "393b317e-8273-49c7-a5f8-dcb0b3d34a83",
                            Email = "bob.smith@example.com",
                            EmailConfirmed = false,
                            Faculty = "Business",
                            FirstName = "Bob",
                            Gender = 0,
                            IsDrinking = 0,
                            IsSmoking = 0,
                            LastName = "Smith",
                            LockoutEnabled = false,
                            LookingFor = 0,
                            NormalizedEmail = "BOB.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "BOB.SMITH@EXAMPLE.COM",
                            Orientation = 0,
                            PasswordHash = "AQAAAAIAAYagAAAAEF8f73Wu/oX+2lMyeYu3uK/wKPK2/9vcsLOKL73xHuZF2a6+P1E/LAJjJ5TjeWvcjw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "abd45bf4-e3fb-473a-9701-bbea21f9d8b7",
                            TwoFactorEnabled = false,
                            University = "State University",
                            UserName = "bob.smith@example.com"
                        },
                        new
                        {
                            Id = "db0f9d3e-b5c9-4ca4-966e-19db4dffacc8",
                            AccessFailedCount = 0,
                            Bio = "Passionate about graphic design and photography.",
                            BirthDate = new DateTime(1992, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "8d845a1c-f3f5-4bea-9778-38da1cab59c2",
                            Email = "carol.davis@example.com",
                            EmailConfirmed = false,
                            Faculty = "Design",
                            FirstName = "Carol",
                            Gender = 0,
                            IsDrinking = 1,
                            IsSmoking = 2,
                            LastName = "Davis",
                            LockoutEnabled = false,
                            LookingFor = 3,
                            NormalizedEmail = "CAROL.DAVIS@EXAMPLE.COM",
                            NormalizedUserName = "CAROL.DAVIS@EXAMPLE.COM",
                            Orientation = 3,
                            PasswordHash = "AQAAAAIAAYagAAAAEFYRvvkB7DMEbgFcmuxWvOE9wpG+SbQiPfQB4xGcvBITmSmbsb4C6zAfLxlDC+lWsw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "919f8425-9f36-4baf-965b-ac59317d2b7b",
                            TwoFactorEnabled = false,
                            University = "Arts College",
                            UserName = "carol.davis@example.com"
                        },
                        new
                        {
                            Id = "6f2525cc-8294-484b-ab62-911f603920bd",
                            AccessFailedCount = 0,
                            Bio = "Avid cyclist and technology enthusiast.",
                            BirthDate = new DateTime(1990, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "a01a423b-abfa-49bb-aaa9-cc2352e14a02",
                            Email = "david.miller@example.com",
                            EmailConfirmed = false,
                            Faculty = "Mechanical",
                            FirstName = "David",
                            Gender = 0,
                            IsDrinking = 0,
                            IsSmoking = 1,
                            LastName = "Miller",
                            LockoutEnabled = false,
                            LookingFor = 2,
                            NormalizedEmail = "DAVID.MILLER@EXAMPLE.COM",
                            NormalizedUserName = "DAVID.MILLER@EXAMPLE.COM",
                            Orientation = 1,
                            PasswordHash = "AQAAAAIAAYagAAAAEFEOSYVK/aMSYzYpIWy/vXIBoJlMxEBD85wN2SELYWJkJ1/nmKwZoQvHntCRs/zM5g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "79bfb2d1-bd87-4912-9e96-9c3d2999c71e",
                            TwoFactorEnabled = false,
                            University = "Engineering Institute",
                            UserName = "david.miller@example.com"
                        });
                });

            modelBuilder.Entity("UserImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserImages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("UniMate2.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("UniMate2.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniMate2.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("UniMate2.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UniMate2.Models.Domain.FriendRequest", b =>
                {
                    b.HasOne("UniMate2.Models.Domain.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId");

                    b.HasOne("UniMate2.Models.Domain.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("UniMate2.Models.Domain.User", b =>
                {
                    b.HasOne("UniMate2.Models.Domain.User", null)
                        .WithMany("Friends")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("UserImage", b =>
                {
                    b.HasOne("UniMate2.Models.Domain.User", "User")
                        .WithMany("Images")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UniMate2.Models.Domain.User", b =>
                {
                    b.Navigation("Friends");

                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UniMate2.Data;

#nullable disable

namespace UniMate2.Migrations
{
    [DbContext(typeof(ServerDbContext))]
    [Migration("20250331220150_AddProfileView")]
    partial class AddProfileView
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UniMate.Models.Domain.ProfileView", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ViewedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ViewedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ViewerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("ProfileViews");
                });

            modelBuilder.Entity("UniMate2.Models.Domain.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("079d03e0-1a45-4e74-bb49-2a835689bcdd"),
                            Description = "A meetup for community members.",
                            EndDate = new DateTime(2023, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "City Park",
                            StartDate = new DateTime(2023, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Community Meetup"
                        },
                        new
                        {
                            Id = new Guid("916bff14-17c3-4695-aa15-5999cae412e6"),
                            Description = "Annual technology conference.",
                            EndDate = new DateTime(2023, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Convention Center",
                            StartDate = new DateTime(2023, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Tech Conference"
                        },
                        new
                        {
                            Id = new Guid("bb1a9c36-2e1a-46c5-a9f2-ca25be14b9df"),
                            Description = "Workshop on emerging technologies.",
                            EndDate = new DateTime(2023, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Tech Institute",
                            StartDate = new DateTime(2023, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Workshop"
                        });
                });

            modelBuilder.Entity("UniMate2.Models.Domain.FriendRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("text");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SenderId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("FriendRequests");
                });

            modelBuilder.Entity("UniMate2.Models.Domain.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LikedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LikedId")
                        .HasColumnType("text");

                    b.Property<string>("LikerId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LikedId");

                    b.HasIndex("LikerId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("UniMate2.Models.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Faculty")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<int?>("IsDrinking")
                        .HasColumnType("integer");

                    b.Property<int?>("IsSmoking")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LookingFor")
                        .HasColumnType("integer");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int?>("Orientation")
                        .HasColumnType("integer");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<int?>("PersonalityType")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("University")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int?>("ZodiakSign")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "baca204a-57a6-4000-873f-dc871d44fa67",
                            AccessFailedCount = 0,
                            Bio = "",
                            BirthDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "81644473-574c-4d09-a322-41a7b57e7840",
                            EmailConfirmed = false,
                            Faculty = "Faculty2",
                            FirstName = "FirstName2",
                            Gender = 2,
                            IsDrinking = 0,
                            IsSmoking = 1,
                            LastName = "LastName2",
                            LockoutEnabled = false,
                            LookingFor = 0,
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1@EXAMPLE.COM",
                            Orientation = 0,
                            PasswordHash = "AQAAAAIAAYagAAAAEOt8yPqSnYE+gZL4fcQZj1ilU23uIqwZldz4yBSMvGE9nOJ1XlC1n1EVHCYxj6KfgQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "94d2a48a-f75f-41e7-8ac2-cc37dad6d68c",
                            TwoFactorEnabled = false,
                            University = "University1"
                        },
                        new
                        {
                            Id = "3443dab2-5339-4397-9458-b2b877fa04d2",
                            AccessFailedCount = 0,
                            Bio = "Bio2",
                            BirthDate = new DateTime(2002, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "2ddb3276-8126-409f-9167-b472475f62d0",
                            Email = "user2@example.com",
                            EmailConfirmed = false,
                            Faculty = "Faculty2",
                            FirstName = "FirstName2",
                            Gender = 0,
                            IsDrinking = 0,
                            IsSmoking = 1,
                            LastName = "LastName2",
                            LockoutEnabled = false,
                            LookingFor = 0,
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2@EXAMPLE.COM",
                            Orientation = 0,
                            PasswordHash = "AQAAAAIAAYagAAAAEBAPHLxXlSR2i31risigyQf7Z0xbGHR53qVQuBGnQWgkTlER4vlz0s+kN70q4V1ohw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3f5d50b6-6f7d-447c-a271-7f5ef2c22472",
                            TwoFactorEnabled = false,
                            University = "University2",
                            UserName = "user2@example.com"
                        },
                        new
                        {
                            Id = "2daf219c-d869-4569-989f-81f3ba3f820a",
                            AccessFailedCount = 0,
                            Bio = "Loves hiking and outdoor adventures.",
                            BirthDate = new DateTime(1995, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "4b1c68bd-b3ad-4499-8123-b0275117ea91",
                            Email = "alice.johnson@example.com",
                            EmailConfirmed = false,
                            Faculty = "Engineering",
                            FirstName = "Alice",
                            Gender = 1,
                            IsDrinking = 2,
                            IsSmoking = 1,
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            LookingFor = 1,
                            NormalizedEmail = "ALICE.JOHNSON@EXAMPLE.COM",
                            NormalizedUserName = "ALICE.JOHNSON@EXAMPLE.COM",
                            Orientation = 2,
                            PasswordHash = "AQAAAAIAAYagAAAAECJeKbsaT+JsG/+5IlR2yigpK8Te89tq1sSxE3219Fst8ydNuGDOA5dqymfZBKo7IA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f6944ee8-7160-4b2c-b46f-eae577a03c4c",
                            TwoFactorEnabled = false,
                            University = "Tech University",
                            UserName = "alice.johnson@example.com"
                        },
                        new
                        {
                            Id = "8c8ca963-9c66-40a7-af50-6789834358bb",
                            AccessFailedCount = 0,
                            Bio = "Enjoys cooking and traveling.",
                            BirthDate = new DateTime(1988, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "ab497c93-8ab5-4d63-b6c7-ffeef845200e",
                            Email = "bob.smith@example.com",
                            EmailConfirmed = false,
                            Faculty = "Business",
                            FirstName = "Bob",
                            Gender = 0,
                            IsDrinking = 0,
                            IsSmoking = 0,
                            LastName = "Smith",
                            LockoutEnabled = false,
                            LookingFor = 0,
                            NormalizedEmail = "BOB.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "BOB.SMITH@EXAMPLE.COM",
                            Orientation = 0,
                            PasswordHash = "AQAAAAIAAYagAAAAEOhCqDY4GsS6lz6TQBPnFqGsYtEzpmZL90UoEXA3VFKaneC7n08UPnIj0/VRiHwKhw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "81c260c0-0c7c-4876-b130-617c6e1fe467",
                            TwoFactorEnabled = false,
                            University = "State University",
                            UserName = "bob.smith@example.com"
                        },
                        new
                        {
                            Id = "1925a6d5-5189-423d-a4b9-cbf7e4fe021f",
                            AccessFailedCount = 0,
                            Bio = "Passionate about graphic design and photography.",
                            BirthDate = new DateTime(1992, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "e9d5eba1-cc1e-4452-902d-11ff8d87d322",
                            Email = "carol.davis@example.com",
                            EmailConfirmed = false,
                            Faculty = "Design",
                            FirstName = "Carol",
                            Gender = 0,
                            IsDrinking = 1,
                            IsSmoking = 2,
                            LastName = "Davis",
                            LockoutEnabled = false,
                            LookingFor = 3,
                            NormalizedEmail = "CAROL.DAVIS@EXAMPLE.COM",
                            NormalizedUserName = "CAROL.DAVIS@EXAMPLE.COM",
                            Orientation = 3,
                            PasswordHash = "AQAAAAIAAYagAAAAEG9ouCCiPi5JAdMJffef7oVu16qpRjHBv1nPgysw5oifczOCiyqZsjswwt4Aw83Teg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8f6ee1af-b29c-4c13-b989-2a7ad78624e1",
                            TwoFactorEnabled = false,
                            University = "Arts College",
                            UserName = "carol.davis@example.com"
                        },
                        new
                        {
                            Id = "eafbfbd3-2730-4f41-b2ed-012981fff1c5",
                            AccessFailedCount = 0,
                            Bio = "Avid cyclist and technology enthusiast.",
                            BirthDate = new DateTime(1990, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "2938230b-c431-4a9f-b211-9e8bdc874e95",
                            Email = "david.miller@example.com",
                            EmailConfirmed = false,
                            Faculty = "Mechanical",
                            FirstName = "David",
                            Gender = 0,
                            IsDrinking = 0,
                            IsSmoking = 1,
                            LastName = "Miller",
                            LockoutEnabled = false,
                            LookingFor = 2,
                            NormalizedEmail = "DAVID.MILLER@EXAMPLE.COM",
                            NormalizedUserName = "DAVID.MILLER@EXAMPLE.COM",
                            Orientation = 1,
                            PasswordHash = "AQAAAAIAAYagAAAAEFDEV5G4SlFxuMq8z5WzBM3IszP5uwXaO/bL1ENPNW7oID5yBEJ6BISbDUxCY4t5kw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eecb6b1b-7e8e-451d-92a8-b94adc7f04db",
                            TwoFactorEnabled = false,
                            University = "Engineering Institute",
                            UserName = "david.miller@example.com"
                        });
                });

            modelBuilder.Entity("UserImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserImages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("UniMate2.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("UniMate2.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniMate2.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("UniMate2.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UniMate2.Models.Domain.FriendRequest", b =>
                {
                    b.HasOne("UniMate2.Models.Domain.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId");

                    b.HasOne("UniMate2.Models.Domain.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("UniMate2.Models.Domain.Like", b =>
                {
                    b.HasOne("UniMate2.Models.Domain.User", "Liked")
                        .WithMany()
                        .HasForeignKey("LikedId");

                    b.HasOne("UniMate2.Models.Domain.User", "Liker")
                        .WithMany()
                        .HasForeignKey("LikerId");

                    b.Navigation("Liked");

                    b.Navigation("Liker");
                });

            modelBuilder.Entity("UniMate2.Models.Domain.User", b =>
                {
                    b.HasOne("UniMate2.Models.Domain.User", null)
                        .WithMany("Friends")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("UserImage", b =>
                {
                    b.HasOne("UniMate2.Models.Domain.User", "User")
                        .WithMany("Images")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UniMate2.Models.Domain.User", b =>
                {
                    b.Navigation("Friends");

                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UniMate2.Data;

#nullable disable

namespace UniMate2.Migrations
{
    [DbContext(typeof(ServerDbContext))]
    partial class ServerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UniMate2.Models.Domain.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("efa72347-6c44-44d1-8f41-ea221e030028"),
                            Description = "A meetup for community members.",
                            EndDate = new DateTime(2023, 10, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Location = "City Park",
                            StartDate = new DateTime(2023, 10, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Community Meetup"
                        },
                        new
                        {
                            Id = new Guid("e45ff01a-0e18-4151-bb65-a9ce89798b10"),
                            Description = "Annual technology conference.",
                            EndDate = new DateTime(2023, 11, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            Location = "Convention Center",
                            StartDate = new DateTime(2023, 11, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Tech Conference"
                        },
                        new
                        {
                            Id = new Guid("797ec8c8-69bf-4402-8676-2e35de103e0c"),
                            Description = "Workshop on emerging technologies.",
                            EndDate = new DateTime(2023, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Location = "Tech Institute",
                            StartDate = new DateTime(2023, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Workshop"
                        });
                });

            modelBuilder.Entity("UniMate2.Models.Domain.FriendRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SenderId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("FriendRequests");
                });

            modelBuilder.Entity("UniMate2.Models.Domain.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LikedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LikedId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LikerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LikedId");

                    b.HasIndex("LikerId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("UniMate2.Models.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bio")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Faculty")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IsDrinking")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IsSmoking")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LookingFor")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Orientation")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PersonalityType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("University")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ZodiakSign")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "365772e3-115b-4d9e-9e9b-8b88b555e6f6",
                            AccessFailedCount = 0,
                            Bio = "Bio5",
                            BirthDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ConcurrencyStamp = "0e15a8ee-7f89-48ff-8f96-a4697eb18dcb",
                            Email = "user1@example.com",
                            EmailConfirmed = false,
                            Faculty = "Faculty2",
                            FirstName = "FirstName2",
                            Gender = 2,
                            IsDrinking = 0,
                            IsSmoking = 1,
                            LastName = "LastName2",
                            LockoutEnabled = false,
                            LookingFor = 0,
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1@EXAMPLE.COM",
                            Orientation = 0,
                            PasswordHash = "AQAAAAIAAYagAAAAEBdEIUvkcFRZnNKsrPmBtCq4RDTUNvZRPoVN5Nctre+FvHRy1yDo0v5Fd29QMs0nPw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a63e2d0a-58e0-44ad-933e-f6b1a8ad467b",
                            TwoFactorEnabled = false,
                            University = "University1",
                            UserName = "user1@example.com"
                        },
                        new
                        {
                            Id = "0a8caefd-7617-41dc-8ac0-8f232df0ef51",
                            AccessFailedCount = 0,
                            Bio = "Bio2",
                            BirthDate = new DateTime(2002, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ConcurrencyStamp = "9ad15a2c-1fd3-4b9e-a145-c8c9417c5f8d",
                            Email = "user2@example.com",
                            EmailConfirmed = false,
                            Faculty = "Faculty2",
                            FirstName = "FirstName2",
                            Gender = 0,
                            IsDrinking = 0,
                            IsSmoking = 1,
                            LastName = "LastName2",
                            LockoutEnabled = false,
                            LookingFor = 0,
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2@EXAMPLE.COM",
                            Orientation = 0,
                            PasswordHash = "AQAAAAIAAYagAAAAEIPFGuSZtIh/TxdcSPJmTc2nTYxrr3XUUQqqSv6O8UJvOKDcmidsiNPajDgZqKBGOQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7b890d70-d9a9-4c44-8220-868abaab0ba5",
                            TwoFactorEnabled = false,
                            University = "University2",
                            UserName = "user2@example.com"
                        },
                        new
                        {
                            Id = "4f3a28cd-42ef-4ef5-9df5-5e85132cdd46",
                            AccessFailedCount = 0,
                            Bio = "Loves hiking and outdoor adventures.",
                            BirthDate = new DateTime(1995, 5, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            ConcurrencyStamp = "39807744-0bf9-4ce6-a06e-fc00e6ffbe20",
                            Email = "alice.johnson@example.com",
                            EmailConfirmed = false,
                            Faculty = "Engineering",
                            FirstName = "Alice",
                            Gender = 1,
                            IsDrinking = 2,
                            IsSmoking = 1,
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            LookingFor = 1,
                            NormalizedEmail = "ALICE.JOHNSON@EXAMPLE.COM",
                            NormalizedUserName = "ALICE.JOHNSON@EXAMPLE.COM",
                            Orientation = 2,
                            PasswordHash = "AQAAAAIAAYagAAAAEP6aHhOkZ8ch5wij4ujymIzlhu89+WaXFFUvNZJz/w7fY84Pu2wIZAzxg6M22KZUyw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6f16f6b6-58a3-4196-91e0-3b435e6e6de6",
                            TwoFactorEnabled = false,
                            University = "Tech University",
                            UserName = "alice.johnson@example.com"
                        },
                        new
                        {
                            Id = "da88bab1-a541-4d47-9f06-1529dc85e581",
                            AccessFailedCount = 0,
                            Bio = "Enjoys cooking and traveling.",
                            BirthDate = new DateTime(1988, 8, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            ConcurrencyStamp = "370ab519-4c8b-4cc5-9300-71fc2052e5ec",
                            Email = "bob.smith@example.com",
                            EmailConfirmed = false,
                            Faculty = "Business",
                            FirstName = "Bob",
                            Gender = 0,
                            IsDrinking = 0,
                            IsSmoking = 0,
                            LastName = "Smith",
                            LockoutEnabled = false,
                            LookingFor = 0,
                            NormalizedEmail = "BOB.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "BOB.SMITH@EXAMPLE.COM",
                            Orientation = 0,
                            PasswordHash = "AQAAAAIAAYagAAAAEISNEf2fSCfPQI7kTDkD6NaHfk4BX30Aio+F12LE1zkcDgjN8gOWkqvkgESusamt4Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "308a677e-4021-4be0-85c6-3a87c869a915",
                            TwoFactorEnabled = false,
                            University = "State University",
                            UserName = "bob.smith@example.com"
                        },
                        new
                        {
                            Id = "ccaf023c-b32e-4177-b17f-275f0d81ea46",
                            AccessFailedCount = 0,
                            Bio = "Passionate about graphic design and photography.",
                            BirthDate = new DateTime(1992, 3, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            ConcurrencyStamp = "8883b544-b303-43d0-af47-739ca3396601",
                            Email = "carol.davis@example.com",
                            EmailConfirmed = false,
                            Faculty = "Design",
                            FirstName = "Carol",
                            Gender = 0,
                            IsDrinking = 1,
                            IsSmoking = 2,
                            LastName = "Davis",
                            LockoutEnabled = false,
                            LookingFor = 3,
                            NormalizedEmail = "CAROL.DAVIS@EXAMPLE.COM",
                            NormalizedUserName = "CAROL.DAVIS@EXAMPLE.COM",
                            Orientation = 3,
                            PasswordHash = "AQAAAAIAAYagAAAAEHFvhRZMEf/yxUBW+NkIie7J6Rp8wX2Yb7/IlydLyapgirLsE9VXJ4SbqoWXWZUC5w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9906e30a-2a42-44eb-9216-fea25b0d190c",
                            TwoFactorEnabled = false,
                            University = "Arts College",
                            UserName = "carol.davis@example.com"
                        },
                        new
                        {
                            Id = "f1f76013-baa9-4205-a223-bb4dd21610f6",
                            AccessFailedCount = 0,
                            Bio = "Avid cyclist and technology enthusiast.",
                            BirthDate = new DateTime(1990, 7, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            ConcurrencyStamp = "f6b5d571-96b5-4353-8ad4-f90fcc67703d",
                            Email = "david.miller@example.com",
                            EmailConfirmed = false,
                            Faculty = "Mechanical",
                            FirstName = "David",
                            Gender = 0,
                            IsDrinking = 0,
                            IsSmoking = 1,
                            LastName = "Miller",
                            LockoutEnabled = false,
                            LookingFor = 2,
                            NormalizedEmail = "DAVID.MILLER@EXAMPLE.COM",
                            NormalizedUserName = "DAVID.MILLER@EXAMPLE.COM",
                            Orientation = 1,
                            PasswordHash = "AQAAAAIAAYagAAAAECBKXGTqqKBryeTTEa9hEyQAwAZ8oHUf+DgY7mb6TNEmnxrb3tq9P10wsmaFLLZCPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4aa9c66-700e-4834-9eff-6d3cc577f250",
                            TwoFactorEnabled = false,
                            University = "Engineering Institute",
                            UserName = "david.miller@example.com"
                        });
                });

            modelBuilder.Entity("UniMate2.Models.Domain.UserDislike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DislikedUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DislikingUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DislikedUserId");

                    b.HasIndex("DislikingUserId");

                    b.ToTable("UserDislikes");
                });

            modelBuilder.Entity("UniMate2.Models.Domain.UserImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserImages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("UniMate2.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("UniMate2.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniMate2.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("UniMate2.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UniMate2.Models.Domain.FriendRequest", b =>
                {
                    b.HasOne("UniMate2.Models.Domain.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId");

                    b.HasOne("UniMate2.Models.Domain.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("UniMate2.Models.Domain.Like", b =>
                {
                    b.HasOne("UniMate2.Models.Domain.User", "Liked")
                        .WithMany()
                        .HasForeignKey("LikedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniMate2.Models.Domain.User", "Liker")
                        .WithMany()
                        .HasForeignKey("LikerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Liked");

                    b.Navigation("Liker");
                });

            modelBuilder.Entity("UniMate2.Models.Domain.User", b =>
                {
                    b.HasOne("UniMate2.Models.Domain.User", null)
                        .WithMany("Friends")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("UniMate2.Models.Domain.UserDislike", b =>
                {
                    b.HasOne("UniMate2.Models.Domain.User", "DislikedUser")
                        .WithMany()
                        .HasForeignKey("DislikedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UniMate2.Models.Domain.User", "DislikingUser")
                        .WithMany()
                        .HasForeignKey("DislikingUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DislikedUser");

                    b.Navigation("DislikingUser");
                });

            modelBuilder.Entity("UniMate2.Models.Domain.UserImage", b =>
                {
                    b.HasOne("UniMate2.Models.Domain.User", "User")
                        .WithMany("Images")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("UniMate2.Models.Domain.User", b =>
                {
                    b.Navigation("Friends");

                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
